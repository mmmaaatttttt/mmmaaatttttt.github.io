import React from "react";
import { shallow } from "enzyme";
import toJson from "enzyme-to-json";
import { GamingLinearRelationships } from ".";
import visualizationData from "data/gaming-linear-relationships.js";

describe("smoke and snapshot tests", () => {
  it("renders successfully", () => {
    shallow(<GamingLinearRelationships />);
  });

  it("renders first demonstration successfully", () => {
    const wrapper = shallow(<GamingLinearRelationships idx={0} />);
    expect(toJson(wrapper)).toMatchSnapshot();
  });

  it("renders second demonstraction successfully", () => {
    const wrapper = shallow(<GamingLinearRelationships idx={1} />);
    expect(toJson(wrapper)).toMatchSnapshot();
  });

  it("renders third demonstraction successfully", () => {
    const wrapper = shallow(<GamingLinearRelationships idx={2} />);
    expect(toJson(wrapper)).toMatchSnapshot();
  });
});

describe("state changes to differential equation solutions", () => {
  it("updates correctly in first demonstration", () => {
    const idx = 0;
    const wrapper = shallow(<GamingLinearRelationships idx={idx} />);
    const expectedFirsts = [
      [
        { x: 0, y: 1 },
        { x: 0.1, y: 1.0546496472537057 },
        { x: 0.2, y: 1.0982351594039217 },
        { x: 0.30000000000000004, y: 1.130299288891997 },
        { x: 0.4, y: 1.150505656841966 },
        { x: 0.5, y: 1.1586422819778062 },
        { x: 0.6, y: 1.1546238044442112 },
        { x: 0.7, y: 1.1384923813557175 },
        { x: 0.7999999999999999, y: 1.110417244501318 },
        { x: 0.8999999999999999, y: 1.0706929249680635 },
        { x: 0.9999999999999999, y: 1.0197361632708992 },
        { x: 1.0999999999999999, y: 0.9580815374043984 },
        { x: 1.2, y: 0.8863758546913042 },
        { x: 1.3, y: 0.8053713662329813 },
        { x: 1.4000000000000001, y: 0.7159178751896312 },
        { x: 1.5000000000000002, y: 0.618953821650599 },
        { x: 1.6000000000000003, y: 0.5154964376325191 },
        { x: 1.7000000000000004, y: 0.4066310754854856 },
        { x: 1.8000000000000005, y: 0.2934998216615361 },
        { x: 1.9000000000000006, y: 0.17728951529616432 },
        { x: 2.0000000000000004, y: 0.059219297297785564 }
      ],
      [
        { x: 0, y: -1.2 },
        { x: 0.1, y: -0.9840728176817085 },
        { x: 0.2, y: -0.757821908772315 },
        { x: 0.30000000000000004, y: -0.52362082988376 },
        { x: 0.4, y: -0.2839265413690589 },
        { x: 0.5, y: -0.04125363183987768 },
        { x: 0.6, y: 0.2018520619499573 },
        { x: 0.7, y: 0.4428401629578714 },
        { x: 0.7999999999999999, y: 0.679182509424998 },
        { x: 0.8999999999999999, y: 0.9083996773489067 },
        { x: 0.9999999999999999, y: 1.128086991662498 },
        { x: 1.0999999999999999, y: 1.3359397532362935 },
        { x: 1.2, y: 1.5297774170507565 },
        { x: 1.3, y: 1.7075664678978943 },
        { x: 1.4000000000000001, y: 1.8674417536092458 },
        { x: 1.5000000000000002, y: 2.0077260520249767 },
        { x: 1.6000000000000003, y: 2.1269476664226747 },
        { x: 1.7000000000000004, y: 2.223855864816438 },
        { x: 1.8000000000000005, y: 2.297434001155633 },
        { x: 1.9000000000000006, y: 2.346910180771272 },
        { x: 2.0000000000000004, y: 2.3717653581808653 }
      ]
    ];
    wrapper.setState({ values: [1, -0.5, -1.2, 2.1] });
    const instance = wrapper.instance();
    const data = instance
      .transformData(instance.updateData(), visualizationData[idx].diffEqs[0])
      .map(arr => arr.slice(0, expectedFirsts[0].length));
    data.forEach((eqn, j) => {
      eqn.forEach((coords, i) => {
        expect(coords.x).toBeCloseTo(expectedFirsts[j][i].x, 6);
        expect(coords.y).toBeCloseTo(expectedFirsts[j][i].y, 6);
      });
    });
  });

  it("updates correctly in second demonstration", () => {
    const idx = 1;
    const wrapper = shallow(<GamingLinearRelationships idx={idx} />);
    const expectedFirsts = [
      [
        { x: 0, y: -1.1 },
        { x: 0.1, y: -0.6102868473960424 },
        { x: 0.2, y: -0.05500974517746788 },
        { x: 0.30000000000000004, y: 0.5165027525970209 },
        { x: 0.4, y: 1.052444576971929 },
        { x: 0.5, y: 1.5032079058406267 },
        { x: 0.6, y: 1.8259528556162858 },
        { x: 0.7, y: 1.988652107662775 },
        { x: 0.7999999999999999, y: 1.9732309062990536 },
        { x: 0.8999999999999999, y: 1.7774977199093682 },
        { x: 0.9999999999999999, y: 1.415665017444252 },
        { x: 1.0999999999999999, y: 0.9173841729717185 },
        { x: 1.2, y: 0.325352518905404 },
        { x: 1.3, y: -0.3083180093301531 },
        { x: 1.4000000000000001, y: -0.9266643980551627 },
        { x: 1.5000000000000002, y: -1.4729707905099374 },
        { x: 1.6000000000000003, y: -1.89594716727165 },
        { x: 1.7000000000000004, y: -2.154517691554255 },
        { x: 1.8000000000000005, y: -2.2217740359269462 },
        { x: 1.9000000000000006, y: -2.087716194357536 },
        { x: 2.0000000000000004, y: -1.7605062653202523 }
      ],
      [
        { x: 0, y: -1.5 },
        { x: 0.1, y: -1.5631287430836398 },
        { x: 0.2, y: -1.4849423194608407 },
        { x: 0.30000000000000004, y: -1.2697182313752309 },
        { x: 0.4, y: -0.934321130099112 },
        { x: 0.5, y: -0.5069186797915515 },
        { x: 0.6, y: -0.02464040605430584 },
        { x: 0.7, y: 0.46962826204351327 },
        { x: 0.7999999999999999, y: 0.9310417742929168 },
        { x: 0.8999999999999999, y: 1.3168457264056164 },
        { x: 0.9999999999999999, y: 1.590319211379526 },
        { x: 1.0999999999999999, y: 1.7242464286179633 },
        { x: 1.2, y: 1.7035913574213366 },
        { x: 1.3, y: 1.5271154084328082 },
        { x: 1.4000000000000001, y: 1.207769135820508 },
        { x: 1.5000000000000002, y: 0.7717975121267958 },
        { x: 1.6000000000000003, y: 0.2566143958853923 },
        { x: 1.7000000000000004, y: -0.2923847782237 },
        { x: 1.8000000000000005, y: -0.8258027861741062 },
        { x: 1.9000000000000006, y: -1.2946658462287102 },
        { x: 2.0000000000000004, y: -1.654899619288961 }
      ]
    ];
    wrapper.setState({ values: [-1.1, -3.9, 1.3, -1.5, 2.7, -1.1] });
    const instance = wrapper.instance();
    const data = instance
      .transformData(instance.updateData(), visualizationData[idx].diffEqs[0])
      .map(arr => arr.slice(0, expectedFirsts[0].length));
    data.forEach((eqn, j) => {
      eqn.forEach((coords, i) => {
        expect(coords.x).toBeCloseTo(expectedFirsts[j][i].x, 6);
        expect(coords.y).toBeCloseTo(expectedFirsts[j][i].y, 6);
      });
    });
  });

  it("updates correctly in third demonstration", () => {
    const idx = 2;
    const wrapper = shallow(<GamingLinearRelationships idx={idx} />);
    const expectedFirsts = [
      [
        { x: 0, y: 0 },
        { x: 0.1, y: 0.03418692781726444 },
        { x: 0.2, y: 0.06671618734375737 },
        { x: 0.30000000000000004, y: 0.09754224292900644 },
        { x: 0.4, y: 0.12662194312878505 },
        { x: 0.5, y: 0.1539145811139422 },
        { x: 0.6, y: 0.17938195164876625 },
        { x: 0.7, y: 0.20298840457356154 },
        { x: 0.7999999999999999, y: 0.22470089470982918 },
        { x: 0.8999999999999999, y: 0.24448902811825593 },
        { x: 0.9999999999999999, y: 0.26232510464336767 },
        { x: 1.0999999999999999, y: 0.27818415669159263 },
        { x: 1.2, y: 0.2920439841794028 },
        { x: 1.3, y: 0.30388518561159933 },
        { x: 1.4000000000000001, y: 0.3136911852403863 },
        { x: 1.5000000000000002, y: 0.3214482562680872 },
        { x: 1.6000000000000003, y: 0.3271455400623043 },
        { x: 1.7000000000000004, y: 0.33077506135627255 },
        { x: 1.8000000000000005, y: 0.3323317394129809 },
        { x: 1.9000000000000006, y: 0.33181339513739666 },
        { x: 2.0000000000000004, y: 0.3292207541268473 }
      ],
      [
        { x: 0, y: 0 },
        { x: 0.1, y: 0.07726200192581578 },
        { x: 0.2, y: 0.15497578433752238 },
        { x: 0.30000000000000004, y: 0.2330325606324019 },
        { x: 0.4, y: 0.31132306407261034 },
        { x: 0.5, y: 0.3897377007396342 },
        { x: 0.6, y: 0.46816670294939317 },
        { x: 0.7, y: 0.5465002829083948 },
        { x: 0.7999999999999999, y: 0.6246287863985625 },
        { x: 0.8999999999999999, y: 0.7024428462752874 },
        { x: 0.9999999999999999, y: 0.7798335355639934 },
        { x: 1.0999999999999999, y: 0.8566925199395053 },
        { x: 1.2, y: 0.9329122093769281 },
        { x: 1.3, y: 1.008385908759662 },
        { x: 1.4000000000000001, y: 1.083007967235261 },
        { x: 1.5000000000000002, y: 1.1566739261095014 },
        { x: 1.6000000000000003, y: 1.2292806650714876 },
        { x: 1.7000000000000004, y: 1.3007265465452198 },
        { x: 1.8000000000000005, y: 1.3709115579655882 },
        { x: 1.9000000000000006, y: 1.439737451779625 },
        { x: 2.0000000000000004, y: 1.5071078829770321 }
      ]
    ];
    wrapper.setState({
      values: [-0.3, 0.2, -1.1, -0.7, 0.6, -0.2, -0.5, -0.7]
    });
    const instance = wrapper.instance();
    const data = instance
      .transformData(instance.updateData(), visualizationData[idx].diffEqs[0])
      .map(arr => arr.slice(0, expectedFirsts[0].length));
    data.forEach((eqn, j) => {
      eqn.forEach((coords, i) => {
        expect(coords.x).toBeCloseTo(expectedFirsts[j][i].x, 6);
        expect(coords.y).toBeCloseTo(expectedFirsts[j][i].y, 6);
      });
    });
  });
});
