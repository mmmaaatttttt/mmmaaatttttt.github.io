import {
  average,
  choices,
  combinations,
  euclideanDistance,
  generateData
} from "utils/mathHelpers";
import { diffEq1, diffEq2, diffEq3 } from "data/gaming-linear-relationships";
import {
  diffEq2 as diffEq4,
  diffEq3 as diffEq5
} from "data/gaming-nonlinear-relationships";

describe("mathHelpers", () => {
  describe("average", () => {
    test("computes the average of an array of numbers", () => {
      expect(average([1])).toBeCloseTo(1);
      expect(average([1, 2, 3])).toBeCloseTo(2);
      expect(average([4, 1, 2, 7])).toBeCloseTo(3.5);
    });

    test("accepts an accessor as a second argument", () => {
      expect(average(["hello", "goodbye"], s => s.length)).toBeCloseTo(6);
      expect(
        average([{ val: 3 }, { val: 8 }, { val: 0 }], o => o.val)
      ).toBeCloseTo(3.67);
    });

    test("returns 0 for an empty array", () => {
      expect(average([])).toBe(0);
    });
  });

  describe("choices", () => {
    let numbers;

    beforeEach(() => {
      numbers = [1, 2, 3, 4, 5, 6];
    });

    test("returns a random subselection of the original array", () => {
      let subset = choices(numbers, 3);
      expect(subset).toHaveLength(3);
      expect(numbers).toEqual(expect.arrayContaining(subset));
      expect(choices(numbers, 0)).toEqual([]);
    });

    test("returns a new array", () => {
      expect(numbers).not.toBe(choices(numbers, 6));
    });

    test("returns a shuffle of the array if the second argument is larger than the array length", () => {
      expect(choices(numbers, 7)).toHaveLength(6);
      expect(choices(numbers, 8).sort((a, b) => a - b)).toEqual(numbers);
    });
  });

  describe("combinations", () => {
    test("Calculates binomial coefficients when k < n / 2", () => {
      expect(combinations(5, 2)).toBe(10);
      expect(combinations(10, 3)).toBe(120);
      expect(combinations(12, 4)).toBe(495);
      expect(combinations(100, 6)).toBe(1192052400);
    });

    test("Calculates binomial coefficients when k > n / 2", () => {
      expect(combinations(5, 3)).toBe(10);
      expect(combinations(6, 4)).toBe(15);
      expect(combinations(21, 16)).toBe(20349);
      expect(combinations(30, 16)).toBe(145422675);
    });

    test("Calculates binomial coefficients when k === n / 2", () => {
      expect(combinations(4, 2)).toBe(6);
      expect(combinations(6, 3)).toBe(20);
      expect(combinations(8, 4)).toBe(70);
      expect(combinations(10, 5)).toBe(252);
    });

    test("Calculates correctly when k is small or large", () => {
      expect(combinations(1, 0)).toBe(1);
      expect(combinations(1, 1)).toBe(1);
      expect(combinations(5, 1)).toBe(5);
      expect(combinations(5, 4)).toBe(5);
      expect(combinations(5, 0)).toBe(1);
      expect(combinations(5, 5)).toBe(1);
    });
  });

  describe("euclideanDistance", () => {
    test("returns the distance from a set of coordinates to the origin", () => {
      expect(euclideanDistance()).toEqual(0);
      expect(euclideanDistance(1)).toEqual(1);
      expect(euclideanDistance(1, 2)).toBeCloseTo(2.24);
      expect(euclideanDistance(1, 2, 3)).toBeCloseTo(3.74);
      expect(euclideanDistance(1, 2, 3, 4)).toBeCloseTo(5.48);
    });
  });

  describe("generateData", () => {
    test("returns expected initial values for first diffEq", () => {
      const data = generateData(2, 0, 2, 0.1, [3, -3], [-1, 1], diffEq1);
      const results = [
        [
          { x: 0, y: 3 },
          { x: 0.1, y: 3.2845127543682757 },
          { x: 0.2, y: 3.536207740668515 },
          { x: 0.30000000000000004, y: 3.752570088540006 },
          { x: 0.4, y: 3.9314379261816623 },
          { x: 0.5, y: 4.071024140463945 },
          { x: 0.6, y: 4.169934072834168 },
          { x: 0.7, y: 4.227179417405004 },
          { x: 0.7999999999999999, y: 4.24218818413651 },
          { x: 0.8999999999999999, y: 4.214810409037924 },
          { x: 0.9999999999999999, y: 4.145319649839871 },
          { x: 1.0999999999999999, y: 4.034410271263661 },
          { x: 1.2, y: 3.8831904632023133 },
          { x: 1.3, y: 3.693175472157534 },
          { x: 1.4000000000000001, y: 3.4662642939255335 },
          { x: 1.5000000000000002, y: 3.2047135526193493 },
          { x: 1.6000000000000003, y: 2.9111388689636404 },
          { x: 1.7000000000000004, y: 2.588476504518983 },
          { x: 1.8000000000000005, y: 2.2399487501456834 },
          { x: 1.9000000000000006, y: 1.8690347458580319 }
        ],
        [
          { x: 0, y: -3 },
          { x: 0.1, y: -2.685512256356413 },
          { x: 0.2, y: -2.344191755079977 },
          { x: 0.30000000000000004, y: -1.9794488461815898 },
          { x: 0.4, y: -1.5949278696829845 },
          { x: 0.5, y: -1.194470931432973 },
          { x: 0.6, y: -0.7820792903187767 },
          { x: 0.7, y: -0.3618733855182578 },
          { x: 0.7999999999999999, y: 0.0619482380649109 },
          { x: 0.8999999999999999, y: 0.4851508946180033 },
          { x: 0.9999999999999999, y: 0.9035060757245599 },
          { x: 1.0999999999999999, y: 1.3128336918485648 },
          { x: 1.2, y: 1.7090438781460076 },
          { x: 1.3, y: 2.0881790107314093 },
          { x: 1.4000000000000001, y: 2.4464519049125046 },
          { x: 1.5000000000000002, y: 2.7802801534170754 },
          { x: 1.6000000000000003, y: 3.0863280115782703 },
          { x: 1.7000000000000004, y: 3.3615381419685795 },
          { x: 1.8000000000000005, y: 3.6031602064091284 },
          { x: 1.9000000000000006, y: 3.808778362470289 }
        ]
      ];
      data[0].forEach((d, i) => {
        expect(d.x).toBeCloseTo(results[0][i].x);
        expect(d.y).toBeCloseTo(results[0][i].y);
      });
      data[1].forEach((d, i) => {
        expect(d.x).toBeCloseTo(results[1][i].x);
        expect(d.y).toBeCloseTo(results[1][i].y);
      });
    });
  });

  test("returns expected initial values for second diffEq", () => {
    const data = generateData(2, 0, 2, 0.1, [3, -3], [-1, -0.3, 1, 0], diffEq2);
    const results = [
      [
        { x: 0, y: 3 },
        { x: 0.1, y: 3.191697883938649 },
        { x: 0.2, y: 3.3463134499725324 },
        { x: 0.30000000000000004, y: 3.463420698729259 },
        { x: 0.4, y: 3.5429753881167647 },
        { x: 0.5, y: 3.585304384252292 },
        { x: 0.6, y: 3.591091289285448 },
        { x: 0.7, y: 3.561359068002983 },
        { x: 0.7999999999999999, y: 3.49745010693444 },
        { x: 0.8999999999999999, y: 3.401003553350385 },
        { x: 0.9999999999999999, y: 3.2739303950152934 },
        { x: 1.0999999999999999, y: 3.1183866292338474 },
        { x: 1.2, y: 2.9367447830652025 },
        { x: 1.3, y: 2.731564202476208 },
        { x: 1.4000000000000001, y: 2.5055614060402913 },
        { x: 1.5000000000000002, y: 2.261573706707148 },
        { x: 1.6000000000000003, y: 2.002534575894925 },
        { x: 1.7000000000000004, y: 1.7314395324670306 },
        { x: 1.8000000000000005, y: 1.4513132294114583 },
        { x: 1.9000000000000006, y: 1.1651796291979526 }
      ],
      [
        { x: 0, y: -3 },
        { x: 0.1, y: -2.690108885662753 },
        { x: 0.2, y: -2.3628969342042287 },
        { x: 0.30000000000000004, y: -2.0220968982060397 },
        { x: 0.4, y: -1.6714649970508972 },
        { x: 0.5, y: -1.3147431517127044 },
        { x: 0.6, y: -0.9556226229120522 },
        { x: 0.7, y: -0.597709236362005 },
        { x: 0.7999999999999999, y: -0.2444903663580197 },
        { x: 0.8999999999999999, y: 0.10069589605124649 },
        { x: 0.9999999999999999, y: 0.4346891863913718 },
        { x: 1.0999999999999999, y: 0.7545327339354703 },
        { x: 1.2, y: 1.0574964488294085 },
        { x: 1.3, y: 1.3410975145397361 },
        { x: 1.4000000000000001, y: 1.6031210221160987 },
        { x: 1.5000000000000002, y: 1.8416187571404499 },
        { x: 1.6000000000000003, y: 2.0549377103708024 },
        { x: 1.7000000000000004, y: 2.241724276679382 },
        { x: 1.8000000000000005, y: 2.400923542257337 },
        { x: 1.9000000000000006, y: 2.531781444039665 }
      ]
    ];
    data[0].forEach((d, i) => {
      expect(d.x).toBeCloseTo(results[0][i].x);
      expect(d.y).toBeCloseTo(results[0][i].y);
    });
    data[1].forEach((d, i) => {
      expect(d.x).toBeCloseTo(results[1][i].x);
      expect(d.y).toBeCloseTo(results[1][i].y);
    });
  });

  test("returns expected initial values for third diffEq", () => {
    const data = generateData(
      2,
      0,
      2,
      0.1,
      [0, 0],
      [1, -5, 1, 3, 2, -5, 4, 2],
      diffEq3
    );
    const results = [
      [
        { x: 0, y: 0 },
        { x: 0.1, y: 0.9543262847018704 },
        { x: 0.2, y: 1.553822668212463 },
        { x: 0.30000000000000004, y: 1.9372717813645233 },
        { x: 0.4, y: 2.1865295875822612 },
        { x: 0.5, y: 2.3508637961391687 },
        { x: 0.6, y: 2.460508054309048 },
        { x: 0.7, y: 2.534390581729448 },
        { x: 0.7999999999999999, y: 2.5845775913514637 },
        { x: 0.8999999999999999, y: 2.618889289453502 },
        { x: 0.9999999999999999, y: 2.6424619087409416 },
        { x: 1.0999999999999999, y: 2.6587217793150226 },
        { x: 1.2, y: 2.6699694418886466 },
        { x: 1.3, y: 2.677779076857386 },
        { x: 1.4000000000000001, y: 2.68319948050988 },
        { x: 1.5000000000000002, y: 2.6869693845939238 },
        { x: 1.6000000000000003, y: 2.6895949199314426 },
        { x: 1.7000000000000004, y: 2.691423050732095 },
        { x: 1.8000000000000005, y: 2.69269558773812 },
        { x: 1.9000000000000006, y: 2.693590612417974 }
      ],
      [
        { x: 0, y: 0 },
        { x: 0.1, y: 0.24457026683979619 },
        { x: 0.2, y: 0.5105631612869742 },
        { x: 0.30000000000000004, y: 0.7464689900371838 },
        { x: 0.4, y: 0.9376583931323695 },
        { x: 0.5, y: 1.0851165058119407 },
        { x: 0.6, y: 1.1954533577394326 },
        { x: 0.7, y: 1.2763922957547171 },
        { x: 0.7999999999999999, y: 1.3349678740190833 },
        { x: 0.8999999999999999, y: 1.37695739756877 },
        { x: 0.9999999999999999, y: 1.406858855297868 },
        { x: 1.0999999999999999, y: 1.4280462883591445 },
        { x: 1.2, y: 1.4430076212967615 },
        { x: 1.3, y: 1.4535353596586047 },
        { x: 1.4000000000000001, y: 1.4609378765191918 },
        { x: 1.5000000000000002, y: 1.4661330669936181 },
        { x: 1.6000000000000003, y: 1.4697745672198221 },
        { x: 1.7000000000000004, y: 1.4723261767845703 },
        { x: 1.8000000000000005, y: 1.4741133983665178 },
        { x: 1.9000000000000006, y: 1.47536294329055 }
      ]
    ];
    data[0].forEach((d, i) => {
      expect(d.x).toBeCloseTo(results[0][i].x);
      expect(d.y).toBeCloseTo(results[0][i].y);
    });
    data[1].forEach((d, i) => {
      expect(d.x).toBeCloseTo(results[1][i].x);
      expect(d.y).toBeCloseTo(results[1][i].y);
    });
  });

  test("returns expected initial values for fourth diffEq", () => {
    const data = generateData(2, 0, 2, 0.1, [4, -2], [3, 1, -5, -2], diffEq4);
    const results = [
      [
        { x: 0, y: 4 },
        { x: 0.1, y: 3.5659910897982936 },
        { x: 0.2, y: -1.1047972976812628 },
        { x: 0.30000000000000004, y: -3.50160713333363 },
        { x: 0.4, y: -3.3584550557465254 },
        { x: 0.5, y: -0.1475933786900502 },
        { x: 0.6, y: 2.343682214373709 },
        { x: 0.7, y: 2.9670354755798622 },
        { x: 0.7999999999999999, y: 2.8286873470135325 },
        { x: 0.8999999999999999, y: 0.7860300468289153 },
        { x: 0.9999999999999999, y: -0.8511242976382051 },
        { x: 1.0999999999999999, y: -1.8964467631995878 },
        { x: 1.2, y: -2.201982367173809 },
        { x: 1.3, y: -2.452258462801224 },
        { x: 1.4000000000000001, y: -2.229529361994853 },
        { x: 1.5000000000000002, y: -1.1525302076701627 },
        { x: 1.6000000000000003, y: -0.3233698384189709 },
        { x: 1.7000000000000004, y: 0.10689283996317976 },
        { x: 1.8000000000000005, y: 0.36463697507058473 },
        { x: 1.9000000000000006, y: 0.5474131496610808 }
      ],
      [
        { x: 0, y: -2 },
        { x: 0.1, y: 4.136016616145704 },
        { x: 0.2, y: 4.235188739960437 },
        { x: 0.30000000000000004, y: 1.1543769077855706 },
        { x: 0.4, y: -3.3047315574157023 },
        { x: 0.5, y: -3.7476047919266273 },
        { x: 0.6, y: -2.68282790664454 },
        { x: 0.7, y: 0.054971775344949604 },
        { x: 0.7999999999999999, y: 2.858810072249502 },
        { x: 0.8999999999999999, y: 3.193650553865152 },
        { x: 0.9999999999999999, y: 2.631228732508684 },
        { x: 1.0999999999999999, y: 1.8130434596569664 },
        { x: 1.2, y: 0.4406690347579223 },
        { x: 1.3, y: -1.027512015277149 },
        { x: 1.4000000000000001, y: -2.415598331547375 },
        { x: 1.5000000000000002, y: -2.557084156841551 },
        { x: 1.6000000000000003, y: -2.0210524053770165 },
        { x: 1.7000000000000004, y: -1.627373752974032 },
        { x: 1.8000000000000005, y: -1.4145626793803765 },
        { x: 1.9000000000000006, y: -1.26958866830678 }
      ]
    ];
    data[0].forEach((d, i) => {
      expect(d.x).toBeCloseTo(results[0][i].x);
      expect(d.y).toBeCloseTo(results[0][i].y);
    });
    data[1].forEach((d, i) => {
      expect(d.x).toBeCloseTo(results[1][i].x);
      expect(d.y).toBeCloseTo(results[1][i].y);
    });
  });

  test("returns expected initial values for fifth diffEq", () => {
    const data = generateData(
      4,
      0,
      2,
      0.1,
      [1, 1, 0, 0],
      [-4, 1.1, 3, -2, 1.5, -1],
      diffEq5
    );
    const results = [
      [
        { x: 0, y: 1 },
        { x: 0.1, y: 1.080732315399472 },
        { x: 0.2, y: 1.1216981248963143 },
        { x: 0.30000000000000004, y: 1.1483818284489842 },
        { x: 0.4, y: 1.1802989249917015 },
        { x: 0.5, y: 1.2317239141219 },
        { x: 0.6, y: 1.3167435667850793 },
        { x: 0.7, y: 1.4523157700722769 },
        { x: 0.7999999999999999, y: 1.661846883652095 },
        { x: 0.8999999999999999, y: 1.9462105640894694 },
        { x: 0.9999999999999999, y: 2.2558258154789295 },
        { x: 1.0999999999999999, y: 2.391143857466992 },
        { x: 1.2, y: 2.0108680960413103 },
        { x: 1.3, y: 1.0910924148894923 },
        { x: 1.4000000000000001, y: 0.1392330883907321 },
        { x: 1.5000000000000002, y: -0.49117773252351915 },
        { x: 1.6000000000000003, y: -0.8222251731822985 },
        { x: 1.7000000000000004, y: -0.9809803732350553 },
        { x: 1.8000000000000005, y: -1.061447645430447 },
        { x: 1.9000000000000006, y: -1.1115064250278153 }
      ],
      [
        { x: 0, y: 1 },
        { x: 0.1, y: 0.8055058164269909 },
        { x: 0.2, y: 0.6289424145030209 },
        { x: 0.30000000000000004, y: 0.47568673923128485 },
        { x: 0.4, y: 0.34362983827517757 },
        { x: 0.5, y: 0.22515035474895856 },
        { x: 0.6, y: 0.1078328718189624 },
        { x: 0.7, y: -0.026568936909576565 },
        { x: 0.7999999999999999, y: -0.20999465535587017 },
        { x: 0.8999999999999999, y: -0.49227085895023154 },
        { x: 0.9999999999999999, y: -0.9335528573985791 },
        { x: 1.0999999999999999, y: -1.5388611938529926 },
        { x: 1.2, y: -2.1010214220889574 },
        { x: 1.3, y: -2.269587767948353 },
        { x: 1.4000000000000001, y: -2.021404903927354 },
        { x: 1.5000000000000002, y: -1.6248836217286797 },
        { x: 1.6000000000000003, y: -1.2657782509861795 },
        { x: 1.7000000000000004, y: -1.0005537420952533 },
        { x: 1.8000000000000005, y: -0.8303733119361878 },
        { x: 1.9000000000000006, y: -0.725636281682412 }
      ],
      [
        { x: 0, y: 0 },
        { x: 0.1, y: 0.013224936620090576 },
        { x: 0.2, y: 0.04137620641858468 },
        { x: 0.30000000000000004, y: 0.0731235232511584 },
        { x: 0.4, y: 0.10569884672553946 },
        { x: 0.5, y: 0.1427295176548103 },
        { x: 0.6, y: 0.19336167248437647 },
        { x: 0.7, y: 0.2731661727015581 },
        { x: 0.7999999999999999, y: 0.4118913971330102 },
        { x: 0.8999999999999999, y: 0.657569956915566 },
        { x: 0.9999999999999999, y: 1.0688883249646741 },
        { x: 1.0999999999999999, y: 1.6496645031297217 },
        { x: 1.2, y: 2.1917394989366406 },
        { x: 1.3, y: 2.3438614473253923 },
        { x: 1.4000000000000001, y: 2.0822150493844274 },
        { x: 1.5000000000000002, y: 1.674670757913218 },
        { x: 1.6000000000000003, y: 1.3065405104881447 },
        { x: 1.7000000000000004, y: 1.0339270575149133 },
        { x: 1.8000000000000005, y: 0.8576970540355419 },
        { x: 1.9000000000000006, y: 0.7480070679010044 }
      ],
      [
        { x: 0, y: 0 },
        { x: 0.1, y: 0.0006781647588385955 },
        { x: 0.2, y: 0.004340834120188112 },
        { x: 0.30000000000000004, y: 0.01164534225595518 },
        { x: 0.4, y: 0.02215953388120841 },
        { x: 0.5, y: 0.035527763693473866 },
        { x: 0.6, y: 0.05196259432369353 },
        { x: 0.7, y: 0.07226519948307636 },
        { x: 0.7999999999999999, y: 0.09705547732311735 },
        { x: 0.8999999999999999, y: 0.12269286542146471 },
        { x: 0.9999999999999999, y: 0.12704284837209429 },
        { x: 1.0999999999999999, y: 0.042483320991697854 },
        { x: 1.2, y: -0.22722575459178565 },
        { x: 1.3, y: -0.6378823285545602 },
        { x: 1.4000000000000001, y: -0.9719667085684329 },
        { x: 1.5000000000000002, y: -1.1164185722833913 },
        { x: 1.6000000000000003, y: -1.1133628236885262 },
        { x: 1.7000000000000004, y: -1.034695668313168 },
        { x: 1.8000000000000005, y: -0.9282114990680892 },
        { x: 1.9000000000000006, y: -0.8169978246180603 }
      ]
    ];
    data.forEach((arr, i) => {
      arr.forEach((d, j) => {
        expect(d.x).toBeCloseTo(results[i][j].x);
        expect(d.y).toBeCloseTo(results[i][j].y);
      });
    });
  });
});
